paths:
  /api/users/:
    get:
      summary: Obtiene todos los usuarios
      tags:
        - Users
      responses:
        '200':
          description: Lista de usuarios obtenidos satisfactoriamente desde la base de datos.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: String
                    example: success
                  payload:
                    type: array
                    items:
                      $ref: '#components/schemas/User'
        '500':
          description: 'Error interno del servidor, usualmente generado por una query defectuosa o un fallo de conexion con la base de datos'
  /api/users/{uid}:
    get:
      summary: Obtiene el usuario con el id pasado por parametro
      tags:
        - Users
      parameters:
      - name: uid
        in: path
        required: true
        description: 'id del usuario que se desea solicitar'
        schema:
          $type: String
      responses:
        '200':
          description: 'El usuario con el id dado fue obtenido satisfactoriamente desde la base de datos.'
          content:
            application/json:
              schema:
                $ref: '#components/schemas/User'
        '500':
          description: 'Error interno del servidor, usualmente generado por una query defectuosa o un fallo de conexion con la base de datos'
    put:
      summary: Actualiza el usuario con el id pasado por parametro con los datos pasados en el cuerpo de la peticion
      tags:
       - Users
      parameters:
      - name: uid
        in: path
        required: true
        description: 'id del usuario que se desea actualizar'
        schema:
          $type: String
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/requestBodies/updateUser'
      responses:
        '200':
          description: El usuario con el id dado fue actualizado satisfactoriamente en la base de datos con la informacion brindada.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: String
                    example: success
                  message:
                    type: String
                    example: User updated
        '500':
          description: 'Error interno del servidor, usualmente generado por una query defectuosa o un fallo de conexion con la base de datos'
    delete:
      summary: Elimina el usuario con el id pasado por parametro de la base de datos
      tags: 
      - Users
      parameters:
      - name: uid
        in: path
        required: true
        description: 'id del usuario que se desea actualizar'
        schema:
          $type: String
      responses:
        '200':
          description: El usuario con el id dado fue actualizado satisfactoriamente en la base de datos con la informacion brindada.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: String
                    example: success
                  message:
                    type: String
                    example: User deleted
        '500':
          description: 'Error interno del servidor, usualmente generado por una query defectuosa o un fallo de conexion con la base de datos'
      



components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: ObjectId
          description: Id autogenerado de mongo
        first_name:
          type: String
          description: Nombre del usuario
        last_name:
          type: String
          description: Apellido del usuario
        email:
          type: String
          description: Correo del usuario, este campo es único
        password:
          type: String
          description: Contraseña Hasheada del usuario.
        role:
          type: String
          description: Rol del usuario
        pets:
          type: Array
          description: Mascotas del usuario
        __v:
          type: Number
          description: Version
      example:
        _id: ObjectId("638b8c323f3a4b3be6dc397e")
        first_name: Mauricio
        last_name: Espinosa
        email: correomau@correo.com
        password: $2b$10$tZjC7z6oTEOfkbhkyIluy.ks4IOctgt3Ddzu/VbXUrssIDp2jka
        role: admin
        pets: []
        __v: 0
  requestBodies:
    updateUser:
      type: Object
      properties:
        first_name:
          type: String
          description: Nombre del usuario
        last_name:
          type: String
          description: Apellido del usuario
        email:
          type: String
          description: Correo del usuario, este campo es unico
        password:
          type: String
          description: Contraseña del usuario, posteriormente sera hasheada 
        pets:
          type: Array
          description: Mascotas del usuario, por defecto un array vacio.
      example:
        first_name: Jonas
        last_name: Weimann
        email: jonasweimann@correo.com
        password: clave1234
        pets: []
